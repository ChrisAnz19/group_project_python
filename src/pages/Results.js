import React from 'react';
import { motion } from 'framer-motion';
import { useLocation, Link } from 'react-router-dom';
import jsPDF from 'jspdf';
import { 
  CheckCircle, 
  AlertCircle, 
  FileText, 
  Download, 
  ArrowLeft,
  Sparkles,
  TrendingUp,
  Target,
  Copy,
  Check
} from 'lucide-react';
import {parseAnalysisIntoSections, formatAnalysis} from '../components/TextWrangler';

const Results = () => {
  const location = useLocation();
  const { analysis, uploadMessage } = location.state || {};
  const [copiedSection, setCopiedSection] = React.useState(null);

  // Function to download analysis as PDF
  const downloadPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;
    const maxWidth = pageWidth - (margin * 2);
    let yPosition = margin;

    // Helper function to add text with word wrapping
    const addText = (text, fontSize = 12, isBold = false) => {
      doc.setFontSize(fontSize);
      if (isBold) {
        doc.setFont(undefined, 'bold');
      } else {
        doc.setFont(undefined, 'normal');
      }
      
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach(line => {
        if (yPosition > 280) { // Near bottom of page
          doc.addPage();
          yPosition = margin;
        }
        doc.text(line, margin, yPosition);
        yPosition += fontSize * 0.6;
      });
      yPosition += 5; // Add some space after text block
    };

    // Header
    addText('RESUME ANALYSIS REPORT', 20, true);
    addText(`Generated on ${new Date().toLocaleDateString()}`, 12);
    yPosition += 10;

    // Add sections
    sections.forEach((section, index) => {
      // Section title
      addText(section.title, 16, true);
      
      // Section content
      const lines = section.content.split('\n');
      lines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed) {
          // Handle bullet points
          if (trimmed.startsWith('- ') || trimmed.startsWith('• ')) {
            addText(`• ${trimmed.substring(2)}`, 11);
          } else {
            addText(trimmed, 11);
          }
        }
      });
      
      yPosition += 10; // Space between sections
    });

    // Footer
    yPosition += 20;
    addText('Generated by Resume Analyzer Pro', 10);

    // Save the PDF
    doc.save(`resume-analysis-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  // Function to copy text to clipboard
  const copyToClipboard = (text, section) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    });
  };

  // If no analysis data, redirect to home
  if (!analysis) {
    return (
      <div className="text-center py-12">
        <div className="card max-w-md mx-auto">
          <AlertCircle className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold mb-2">No Analysis Found</h2>
          <p className="text-gray-600 mb-6">
            Please upload a resume or paste text to get started.
          </p>
          <Link to="/" className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Go Back Home
          </Link>
        </div>
      </div>
    );
  }
  
  // Define section patterns and titles
  // These patterns should match the sections in your analysis text
  // Adjust these patterns based on your actual analysis format
  const sectionPatterns = [
    /(?:^|\n)\s*(?:##?\s*)?(?:\d+\.?\s*)?Education[:\s]*(?:Recommendations?|Section)?[:\s]*/gmi,
    /(?:^|\n)\s*(?:##?\s*)?(?:\d+\.?\s*)?Experience[:\s]*(?:Recommendations?|Section)?[:\s]*/gmi,
    /(?:^|\n)\s*(?:##?\s*)?(?:\d+\.?\s*)?Skills?[:\s]*(?:Recommendations?|Section)?[:\s]*/gmi,
    /(?:^|\n)\s*(?:##?\s*)?(?:\d+\.?\s*)?General[:\s]*(?:Recommendations?|Section)?[:\s]*/gmi
  ];
  const title = 'Resume Analysis & Recommendations';
  const sectionTitles = [
    'Education Recommendations',
    'Experience Recommendations', 
    'Skills Recommendations',
    'General Recommendations'
  ];
  const sections = parseAnalysisIntoSections(analysis, sectionPatterns, title, sectionTitles);
  const formattedAnalysis = formatAnalysis(analysis);

  const getSectionIcon = (title) => {
    const lowerTitle = title.toLowerCase();
    if (lowerTitle.includes('education')) return <FileText className="w-5 h-5" />;
    if (lowerTitle.includes('experience')) return <TrendingUp className="w-5 h-5" />;
    if (lowerTitle.includes('skill')) return <Target className="w-5 h-5" />;
    return <Sparkles className="w-5 h-5" />;
  };

  const getSectionColor = (title) => {
    const lowerTitle = title.toLowerCase();
    if (lowerTitle.includes('education')) return 'bg-blue-100 text-blue-600';
    if (lowerTitle.includes('experience')) return 'bg-green-100 text-green-600';
    if (lowerTitle.includes('skill')) return 'bg-purple-100 text-purple-600';
    return 'bg-orange-100 text-orange-600';
  };

  return (
    <div className="max-w-6xl mx-auto">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">Resume Analysis Results</h1>
            <p className="text-gray-600">
              Here's your personalized analysis and recommendations
            </p>
          </div>
          <Link to="/" className="inline-flex items-center bg-white hover:bg-gray-50 text-primary-600 font-medium py-2 px-4 rounded-lg border border-primary-200 transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
            <ArrowLeft className="w-4 h-4 mr-2" />
            New Analysis
          </Link>
        </div>

        {uploadMessage && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6"
          >
            <div className="flex items-center">
              <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
              <span className="text-green-800">{uploadMessage}</span>
            </div>
          </motion.div>
        )}
      </motion.div>

      {/* Download Actions */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="flex justify-center space-x-4 mb-8"
      >
        <button
          onClick={() => copyToClipboard(formattedAnalysis, 'full')}
          className="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-all duration-200 shadow-sm"
        >
          {copiedSection === 'full' ? (
            <Check className="w-4 h-4 mr-2 text-green-600" />
          ) : (
            <Copy className="w-4 h-4 mr-2" />
          )}
          {copiedSection === 'full' ? 'Copied!' : 'Copy Analysis'}
        </button>
        <button
          onClick={downloadPDF}
          className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-all duration-200 shadow-sm"
        >
          <Download className="w-4 h-4 mr-2" />
          Download PDF
        </button>
      </motion.div>

      {/* Analysis Sections */}
      <div className={`grid gap-6 ${sections.length === 1 ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-2'}`}>
        {sections.map((section, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 + index * 0.1 }}
            className="card"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <div className={`p-2 rounded-lg mr-3 ${getSectionColor(section.title)}`}>
                  {getSectionIcon(section.title)}
                </div>
                <h3 className="text-lg font-semibold">{section.title}</h3>
              </div>
              <button
                onClick={() => copyToClipboard(section.content, `section-${index}`)}
                className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
              >
                {copiedSection === `section-${index}` ? (
                  <Check className="w-4 h-4 text-green-600" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </button>
            </div>
            
            <div className="prose prose-sm max-w-none">
              <div className="text-gray-700 leading-relaxed space-y-3">
                {section.content.split('\n').map((line, pIndex) => {
                  const trimmed = line.trim();
                  if (!trimmed) return null;
                  
                  // Skip lines that are just numbers or section markers
                  if (trimmed.match(/^\d+\.?\s*$/) || trimmed.match(/^---+$/)) return null;
                  
                  // Format numbered items (like "1. Something:")
                  if (trimmed.match(/^\d+\.\s*[A-Z][^:]*:?\s*$/)) {
                    return (
                      <h4 key={pIndex} className="font-semibold text-gray-900 mt-4 mb-2">
                        {trimmed}
                      </h4>
                    );
                  }
                  
                  // Format bullet points
                  if (trimmed.startsWith('- ') || trimmed.startsWith('• ')) {
                    return (
                      <div key={pIndex} className="flex items-start ml-2">
                        <span className="text-primary-500 mr-3 mt-1 flex-shrink-0">•</span>
                        <span className="flex-1">{trimmed.substring(2).trim()}</span>
                      </div>
                    );
                  }
                  
                  // Format sub-bullets (indented)
                  if (trimmed.match(/^\s*[-•]\s/)) {
                    return (
                      <div key={pIndex} className="flex items-start ml-6">
                        <span className="text-primary-400 mr-3 mt-1 flex-shrink-0">◦</span>
                        <span className="flex-1">{trimmed.replace(/^\s*[-•]\s*/, '').trim()}</span>
                      </div>
                    );
                  }
                  
                  // Regular paragraphs
                  return (
                    <p key={pIndex} className="mb-2 leading-relaxed">
                      {trimmed}
                    </p>
                  );
                })}
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Action Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-12"
      >
        <div className="card text-center">
          <div className="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mx-auto mb-4">
            <ArrowLeft className="w-6 h-6 text-primary-600" />
          </div>
          <h3 className="font-semibold mb-2">Analyze Another Resume</h3>
          <p className="text-gray-600 text-sm mb-4">
            Upload a new resume or paste different text for analysis
          </p>
          <Link to="/" className="btn-primary w-full">
            New Analysis
          </Link>
        </div>

        <div className="card text-center">
          <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4">
            <Sparkles className="w-6 h-6 text-purple-600" />
          </div>
          <h3 className="font-semibold mb-2">Learn More</h3>
          <p className="text-gray-600 text-sm mb-4">
            Discover tips and best practices for resume optimization
          </p>
          <Link to="/about" className="btn-secondary w-full">
            View Tips
          </Link>
        </div>
      </motion.div>

      {/* Tips Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.5 }}
        className="card mt-12"
      >
        <h2 className="text-xl font-semibold mb-4">💡 Pro Tips</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 className="font-medium mb-2">Formatting Best Practices</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Use consistent font and spacing</li>
              <li>• Keep it to 1-2 pages maximum</li>
              <li>• Use bullet points for readability</li>
              <li>• Include relevant keywords</li>
            </ul>
          </div>
          <div>
            <h3 className="font-medium mb-2">ATS Optimization</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Use standard section headings</li>
              <li>• Avoid graphics and tables</li>
              <li>• Include industry-specific keywords</li>
              <li>• Save as PDF format</li>
            </ul>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default Results; 